

/* HACK ALERT - I got the following error:

/usr/include/objc/objc.h:44:22: error: typedef redefinition with different types ('signed char' vs 'int32_t' (aka 'int'))
typedef signed char             BOOL; 
                                ^
/opt/local/include/FreeImage.h:139:17: note: previous definition is here
typedef int32_t BOOL;


pointing to a conflict between objc and freeimage lib. 

to fix, i updated the freeimage lib to use the type BOOL_FI instead of BOOL in all casses

(in /opt/local/include/FreeImage.h)

*/

#include "Includes.hpp"

#include "RendererOSX.h"
#include "MeshBuffer.hpp"
#include "MeshData.hpp"
#include "MeshUtils.hpp"
#include "Program.hpp"
#include "Shapes.hpp"
#include "FBO.hpp"
#include "Behavior.hpp"

#include "Texture.hpp"

using namespace aluminum;

class FBOExample : public RendererOSX {
  public:

    vec3 diffuse = vec3(0.0,1.0,0.0);
    vec3 specular = vec3(1.0,1.0,1.0);
    vec3 ambient = vec3(0.0,0.0,0.3);
    float lightPosX = -1.0f;
    mat4 model, view, proj;

    Program program;
    GLuint vao[1];
    GLint posLoc=0;
    GLint texCoordLoc=1;

    MeshBuffer cubeMeshBuffer;
    MeshBuffer mb;

    Texture texture;
    FBO fbo;

    Behavior rotateBehavior;
   


    void loadMeshes(const std::string& name) {
      mb = MeshUtils::loadMesh(name, posLoc, -1, texCoordLoc, -1);
    }

    void loadCube() {
      MeshData cubeData;
      addCube(cubeData, true, 0.65);
      cubeMeshBuffer.init(cubeData, posLoc, -1, texCoordLoc, -1); 
    }

    void loadTexture(Texture& t, const std::string& name) {
      t.loadTexture(t, name);
    } 


    void loadProgram(Program &p, const std::string& name) {

      p.create();

      p.attach(p.loadText(name + ".vsh"), GL_VERTEX_SHADER);
      glBindAttribLocation(p.id(), posLoc, "vertexPosition");
      glBindAttribLocation(p.id(), texCoordLoc, "vertexTexCoord");

      p.attach(p.loadText(name + ".fsh"), GL_FRAGMENT_SHADER);
      //glBindFragDataLocation(id(), 0, "frag"); //agf

      p.link();
    }

    void setUpFBO(FBO &f) {
      //these two commands are equivalent, but usually i am using FBOs with one color attachement + default depth

      //f.create().attach(Texture(256, 256, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE), RBO(256, 256, GL_DEPTH_COMPONENT24));
      //f.create(256, 256); 
      f.create(10, 10); 
    
      //Texture fboTex = new Texture(  );
    }

    void onCreate() {

      loadTexture(texture, "resources/hubble.jpg");
     texture.minFilter(GL_NEAREST);
     texture.maxFilter(GL_NEAREST);
 
      loadProgram(program, "resources/texture");
  
      loadMeshes("resources/ducky.obj");
      loadCube();
      setUpFBO(fbo);

      proj = glm::perspective(45.0, 1.0, 0.1, 100.0);
      view = glm::lookAt(vec3(0.0,0.0,-5), vec3(0,0,0), vec3(0,1,0) );
      model = glm::mat4();
     // model.rotate(M_PI/2, 0,2).rotate(45.0, 1,2).rotate(8.0, 0,1);

      rotateBehavior = Behavior(now()).delay(1000).length(25000).range(vec3(180.0, 90.0, 360.0)).reversing(true).repeats(-1).sine();


      glEnable(GL_DEPTH_TEST);
      glViewport(0, 0, width, height);
      glClearColor(0.3,0.3,0.3,1.0);
    }

    void draw(mat4 model, MeshBuffer& mb, Texture& t) {

      program.bind(); {
	glUniformMatrix4fv(program.uniform("model"), 1, 0, ptr(model));
	glUniformMatrix4fv(program.uniform("view"), 1, 0, ptr(view));
	glUniformMatrix4fv(program.uniform("proj"), 1, 0, ptr(proj));

	t.bind(GL_TEXTURE0); {

	  glUniform1i(program.uniform("tex0"), 0);
	  mb.draw();

	} t.unbind(GL_TEXTURE0);

      } program.unbind();
    }

    void onFrame(){

      model = glm::mat4();

      vec3 totals = rotateBehavior.tick(now()).totals();
      model = glm::rotate(model, totals.x, vec3(1.0f,0.0f,0.0f));
      model = glm::rotate(model, totals.y, vec3(0.0f,1.0f,0.0f));
      model = glm::rotate(model, totals.z, vec3(0.0f,0.0f,1.0f));

      //model.rotate(0.01, 0, 1).rotate(0.025, 0, 2).rotate(0.015, 1, 2);

      //draw the duck into an offscreen texture
      fbo.bind(); {
	glClearColor(0.5,0.2,0.2,0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	draw(model, mb, texture);

      } fbo.unbind();

      //draw the cube with the offscreen texture
      glViewport(0, 0, width, height);
      glClearColor(0.0,0.0,0.0,1.0);
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

      draw(model, cubeMeshBuffer, fbo.texture);

    }
};

int main() {
  return FBOExample().start(); 
}
