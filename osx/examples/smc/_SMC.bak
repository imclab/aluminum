#include "Includes.hpp"

#include "RendererOSX.h"
#include "MeshBuffer.hpp"
#include "MeshData.hpp"
#include "MeshUtils.hpp"
#include "Program.hpp"
#include "Shapes.hpp"
#include "Texture.hpp"
#include "FBO.hpp"

#include <string> 
#import "VideoPlayer.h"


using namespace aluminum;
using std::string;

class SMC : public RendererOSX {
  
  public:

    mat4 model, view, proj;

    Program pixelateProgram;
    Program textureProgram;

    GLint posLoc=0;
    GLint texCoordLoc=1;

    Texture* videoFrameTexture;
    MeshBuffer mb1;

    VideoPlayer* vp;

    FBO fboPixelate;
    FBO fboProcess;
 

 


    void setUpFBO(FBO &f) {
      //f.create(20, 20); 
    }

    void loadTexture(Texture& t, const std::string& name) {
      t.loadTexture(t, name);
    } 

    void loadProgram(Program &p, const std::string& name) {

      p.create();

      p.attach(p.loadText(name + ".vsh"), GL_VERTEX_SHADER);
      glBindAttribLocation(p.id(), posLoc, "vertexPosition");
      glBindAttribLocation(p.id(), texCoordLoc, "vertexTexCoord");

      p.attach(p.loadText(name + ".fsh"), GL_FRAGMENT_SHADER);

      p.link();
    }

    void onCreate() {

      vp = [[VideoPlayer alloc] init];   

    //  setUpFBO(fboPixelate);
    //  setUpFBO(fboProcess);
      


      string moviefile = "resources/test3.mov";
      videoFrameTexture = [vp createVideoTexture:moviefile useAudio:false autoPlay:true autoLoop:true];

      //loadProgram(pixelateProgram, "resources/pixelate");
      loadProgram(textureProgram, "resources/texture");
      
      mb1.init(MeshUtils::makeClipRectangle(), posLoc, -1, texCoordLoc, -1); 

      view = glm::mat4();
      proj = glm::mat4();
      model = glm::mat4();

      glEnable(GL_DEPTH_TEST);
      glViewport(0, 0, width, height);
      glClearColor(0.5,0.0,0.3,1.0);
    }

    void onFrame(){

      /* 
      
      logic

      
      1. play video -> send video texture to FBO in order to pixelate

      2. set up another FBO and two textures that ping-pong



      3. write output to screen



      */


      //get nextframe of video, if ready (if not, should just use previous texture??)
      [vp nextFrame];

      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

/*
      //pixelate the video texture

      fboPixelate.bind(); {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
          pixelateProgram.bind(); {

            glUniformMatrix4fv(pixelateProgram.uniform("model"), 1, 0, ptr(model));
            glUniformMatrix4fv(pixelateProgram.uniform("view"), 1, 0, ptr(view));
            glUniformMatrix4fv(pixelateProgram.uniform("proj"), 1, 0, ptr(proj));


            int xNumPixels = 10;
            int yNumPixels = 10;
            glUniform1f(pixelateProgram.uniform("xNumPixels"), xNumPixels);
            glUniform1f(pixelateProgram.uniform("yNumPixels"), yNumPixels);

            glUniform1i(pixelateProgram.uniform("tex0"), 0);

            videoFrameTexture->bind(GL_TEXTURE0); {
              mb1.draw();	
            } videoFrameTexture->unbind(GL_TEXTURE0);

          } pixelateProgram.unbind();
      } fboPixelate.unbind();

      //now fbo.texture should be the pixelated video

*/
      

      //draw output to screen

       textureProgram.bind(); {

            glUniformMatrix4fv(pixelateProgram.uniform("model"), 1, 0, ptr(model));
            glUniformMatrix4fv(pixelateProgram.uniform("view"), 1, 0, ptr(view));
            glUniformMatrix4fv(pixelateProgram.uniform("proj"), 1, 0, ptr(proj));


            glUniform1i(textureProgram.uniform("tex0"), 0);
            
            videoFrameTexture->bind(GL_TEXTURE0); {
              mb1.draw();	
            } videoFrameTexture->unbind(GL_TEXTURE0);

            /*
            fboPixelate.texture.bind(GL_TEXTURE0); {
              mb1.draw();	
            } fboPixelate.texture.unbind(GL_TEXTURE0);
            */

        } textureProgram.unbind();




    }

    void onReshape() {
      glViewport(0, 0, width, height);
    }

    void mouseMoved(int px, int py) {
      //bloomAmt = ((float)px/(float)width) * 0.02; //bloom between 0.00 -> 0.02
    }

};


int main() {
  return SMC().start(); 
}
